STATA16 code: 

use "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/analysis/data/bp_med_log_v2.dta", clear

. distinct maskid 

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |     193440       9344

* the total cohort has 9361 but the medication list here is only 9344 unique inidividuals. 
* the below 17 subjects are not in the bp_med_log_v2

MASKID
S00458
S01702
S13634
S13925
S16204
S19984
S24821
S31032
S46995
S57170
S67726
S69263
S75515
S78809
S86180
S94462
S97679



* drop duplicated 
sort maskid formdays
quietly by maskid formdays:  gen dup = cond(_N==1,0,_n)
tab dup
drop if dup == 2 
drop if dup == 3

Output:

          . tab dup
          
                  dup |      Freq.     Percent        Cum.
          ------------+-----------------------------------
                    0 |    193,129       99.84       99.84
                    1 |        154        0.08       99.92
                    2 |        154        0.08      100.00
                    3 |          3        0.00      100.00
          ------------+-----------------------------------
                Total |    193,440      100.00
          
          . drop if dup == 2 
          (154 observations deleted)
          
          . drop if dup == 3
          (3 observations deleted)


* Will merge with BP data now- I have tried to merge it later on but ran into issues where the maskid has only 
BP data without meds data presumably the maskid had the observations removed from some of the filters


. merge m:m maskid formdays using "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (fr
> om Maria)/analysis/data/allbp_intensive+standard.dta"
(note: variable visitorder was byte, now int to accommodate using data's values)
    Result                           # of obs.
    -----------------------------------------
    not matched                        13,328
        from master                    10,457  (_merge==1)
        from using                      2,871  (_merge==2)

    matched                           182,889  (_merge==3)
    -----------------------------------------

. distinct maskid 

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |     196217       9347


* Drop the CLOSEOUT visit, this simple code will still keep the rest of the observation for that maskid as it is
. drop if visitcode == "CLO"
(7,980 observations deleted)

. distinct maskid 

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |     188237       9347


. distinct maskid if _merge ==3

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |     175386       9344




* Sort the data by maskid and formdays
sort maskid formdays

* Generate the thiazide column, thiazide use ==1 
gen thiazide = 0
forvalues i = 1/10 {
    replace thiazide = 1 if (strpos(lower(medname`i'), "hctz") > 0 | strpos(lower(medname`i'), "hct") > 0 | strpos(lower(medname`i'), "hydro") > 0 | strpos(lower(medname`i'), "chlorth") > 0 | strpos(lower(medname`i'), "chloro") > 0 | strpos(lower(medname`i'), "indapa") > 0 |strpos(lower(medname`i'), "metolaz") > 0 |strpos(lower(medname`i'), "diurel") > 0 | strpos(lower(medname`i'), "azide") > 0 | strpos(lower(medname`i'), "lidone") > 0)
}

Output: 
. distinct maskid if thiazide ==1 

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |      95537       6925

		

* Now remove on thiazide at baseline

* Generate a flag for each medname column for thiazide 
forvalues i = 1/10 {
    gen flag_thiazide`i' = strpos(lower(medname`i'), "hctz") > 0 | strpos(lower(medname`i'), "hct") > 0 | strpos(lower(medname`i'), "hydro") > 0 | strpos(lower(medname`i'), "chlorth") > 0 | strpos(lower(medname`i'), "chloro") > 0 | strpos(lower(medname`i'), "indapa") > 0 |strpos(lower(medname`i'), "metolaz") > 0 |strpos(lower(medname`i'), "diurel") > 0 | strpos(lower(medname`i'), "azide") > 0 | strpos(lower(medname`i'), "lidone") > 0
}

* Create an indicator for any thiazide use
gen any_thiazide = (flag_thiazide1 + flag_thiazide2 + flag_thiazide3 + flag_thiazide4 + flag_thiazide5 + flag_thiazide6 + flag_thiazide7 + flag_thiazide8 + flag_thiazide9 + flag_thiazide10) > 0

* Identify the first occurrence of thiazide for each maskid
by maskid (formdays): gen first_thiazide_occurrence = any_thiazide == 1 & sum(any_thiazide) == 1


* explanation: sum(any_thiazide) is a running sum of the any_thiazide variable within each maskid group.
It equals 1 only for the first occurrence of a thiazide within each group. 
For each maskid, the function goes through the rows in order of formdays.
The first time it encounters a row where any_thiazide is 1, both conditions are true, so first_thiazide_occurrence is set to 1 for that row.
For any subsequent rows where any_thiazide is 1, the second condition (sum(any_thiazide) == 1) will be false, so first_thiazide_occurrence will be 0. This ensures that first_thiazide_occurrence is 1 only for the first occurrence of a thiazide medication for each patient, regardless of which row it appears in.

* Record the formdays and daysstart of the first thiazide occurrence

gen first_thiazide_formdays = formdays if first_thiazide_occurrence == 1
by maskid: egen first_thiazide_formdays_filled = min(first_thiazide_formdays)

* explanation: Since we only filled in first_thiazide_formdays for the first occurrence, 
this minimum will be the formdays of the first thiazide occurrence. This function allows us to know when thiazide (in regards of formdays) was first started for a patient, regardless of which row we're looking at for that patient.

 * Generate a column to store the daystart for thiazide medications
sort maskid formdays
gen thiazide_daystart = .
forvalues i = 1/10 {
    replace thiazide_daystart = daysstart`i' if (strpos(lower(medname`i'), "hctz") > 0 | strpos(lower(medname`i'), "hct") > 0 | strpos(lower(medname`i'), "hydro") > 0 | strpos(lower(medname`i'), "chlorth") > 0 | strpos(lower(medname`i'), "chloro") > 0 | strpos(lower(medname`i'), "azide") > 0 | strpos(lower(medname`i'), "lidone") > 0)| strpos(lower(medname`i'), "indapa") > 0 |strpos(lower(medname`i'), "metolaz") > 0 |strpos(lower(medname`i'), "diurel") > 0
}


gen first_thiazide_daysstart =.

forvalues j = 1/10 {
    replace first_thiazide_daysstart = daysstart`j' if first_thiazide_occurrence == 1 & flag_thiazide`j' == 1
}
by maskid: egen first_thiazide_daysstart_filled = min(first_thiazide_daysstart)

* explanation: this is to capture the correct daysstart for the first thiazide occurrence, which could be in any of the 10 medication columns. Repeat this value for every row of each patient, which is useful for subsequent analyses or when checking for changes in medication timing.



* Keep the 1st observation of thiazide being started 
sort maskid formdays
bys maskid: egen min_thiazide_daystart = min(first_thiazide_daysstart)

* Remove patients who are on thiazide at baseline
distinct maskid if thiazide == 1 & min_thiazide_daystart < 0
distinct maskid if thiazide == 1 & min_thiazide_daystart >= 0

Output: 

. distinct maskid if thiazide == 1 & min_thiazide_daystart < 0

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |      14618       1136

. distinct maskid if thiazide == 1 & min_thiazide_daystart >= 0

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |      80919       5789



* Generate a flag variable to identify observations with min_thiazide_daystart < 0
gen flag = (min_thiazide_daystart < 0)

* Create a variable that is 1 if any observation for a maskid has flag = 1
bysort maskid: egen maskid_flag = max(flag)

* Keep only observations where maskid_flag is 0 (i.e., remove all observations for maskids with min_thiazide_daystart < 0)
keep if maskid_flag == 0

* Clean up
drop flag maskid_flag

* Optional: Display the number of observations removed
count
display "Remaining observations: " r(N)


Output: 

. distinct maskid 

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |     165419       8211

. distinct maskid if thiazide ==1

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |      80919       5789





* Now after removing those on thiazide at baseline, work on removing those on thiazide combo meds

// Define the list of medication names to search for
// Create a local macro with the list of medications
local medlist `""amiloride HCTZ" "amiloride/PHCTZ" "amiloride/HCTZ" "AMLORIDE/HCTZ" "atenolol chlorthalidone" "atenolol / chlorthalidone" "Atenolol /Chlorthalidone" "atenolol-chlorthalidone" "atenolol/chlorthalidone" "Atenolol/Chlorthalidone" "Atenolol/Chlorthalize" "atenolol/HCTZ" "azilsartan / chlorthalidone" "azilsartan/chlorthalidone" "azilsartan/chlothalidone" "benazepril/hctz" "benicar hct" "benicar/hctz" "diovan hct" "diovan hctz" "diovan/hct" "Diovan/HCTZ" "Diovan/Hct" "diovan/hctz" "Hydrochlorothiazide / Triamterene" "hydrochlorothiazide triamte" "hydrochlorothiazide triamterene" "hydrochlorothiazide/lisinopril" "hydrochlorothiazide/triamterene" "Hydrochlorothiazide/lisinopril" "Hydrochlorothiazide/lisinoprol" "hct triamterene" "hct z/triamterene" "HCTZ 25/TRIAMTERENE 37.5MG TAB" "hctz / lisinopril" "HCTZ /Triamterene" "hctz / lisonopril" "hctz 12.5/ lisonopril" "hctz 50/triam 75" "HCTZ-Aldactone" "hctz/chlorthalidine" "HCTZ/Lisinopril" "hctz/lisinopril" "hctz/olemesarten" "hctz/quinapril" "hctz/ triamterene" "HCTZ/ LISINOPRIL" "hctz/triamterene" "HCTZ/TRIAMTERENE" "HCTZ/Triamterene" "hyzaar" "hyzaar/Hctz" "lisinopril hct" "Lisinopril / HCTZ" "Lisinopril /HCTZ" "lisinopril-hctz" "lisinopril/ hydrochlorothiaz" "Lisinopril-HCT" "lisinopril/HCTZ" "Lisinopril-HCTZ" "lisinopril hydrochlorothiaz" "Lisinopril-Hydrochlorothiazide" "lisinopril hydrochlorothiazide" "lisinopril/hctz" "Lisinopril/HCTZ" "lisinoprilHCTZ" "losartan / hctz" "losartan/HCTZ" "losartan/hctz" "monopril hct" "moexipril / hctz" "spironolactone hct2" "spironolactone hctz" "spironolactone hydrochlorot" "spironolactone hydrochlorothiazide" "spironolactone-hctz" "spironolactone/HCTZ" "Triamterene HCTZ" "Triamterene Hydrochlorothiazide" "Triamterene hydrochlorothiaze" "Triamterene/ HCTZ" "Triamterene/HCTZ" "Triamterene/Hctz" "TRIAMETERENE/HCTZ" "TRIAMTERENE HCTZ" "TRIAMTERENE/HCTZ" "triam hctz" "triam/hctz" "triameterene" "triameterene/hydrochlorothiazide" "triamterene hctz" "triamterene / hctz" "triamterene hctz" "triamterene hydrochlorothia" "triamterene hydrochlorothiazide" "triamterene-hctz" "triamterene/ hctz" "triamterene/HCTZ" "triamterene/hctz" "triamterene/hydrochlorothia" "valsartan hctz" "valsartan/hctz" "ATENOLOL/CHLORTHALIDONE" "AZISARTAN/HCT" "Amiloride HCTZ" "Atenolol/HCTZ" "Azilsartan/chlothalidone" "Benazapril/HCTZ (PCP-prescribed)" "Benecor/HCTZ" "Benzapril/HCTZ" "Bisoprolol w/hctz (per her PCP)" "DIOVAN/ HCTZ" "DIOVAN HTC" "DIOVAN HCT" "Diovan HCT" "Diovan HCT (PCP prescribed)" "Diovan hct" "Diovan/hctz" "EDARBYCLOR/Chlorthalidone" "EDARBYCLOR" "Edarbyclor" "Enalapril/HCTZ" "Hydroclorothiazide/lisinopril" "Lisinopril HCTZ" "Losartan / HCTZ (PCP-prescribed, 1/2 )" "Losartan HCTZ" "Losartan potassium HCTZ" "Losartan/HCTZ" "Losartan/hctz" "McCardis HCTZ" "Micardis/HCTZ" "Spironolactone-HCTZ" "Triamterine/HCTZ" "Valsartan/HCTZ" "aldactazide" "amiloride & hctz" "amiloride / hctz" "amiloride /hctz" "amiloride hctz (5/50 mg tab (take 1)" "amiloride/hctz" "amoxipril/ HCTZ" "benazapril/hctz" "bisoprolol hctz" "enalapril hydrochlorothiazi" "hydrochlorothiazide / lisinopril" "isinopril hydrochlorothiaz" "lisinipril hctz" "lisinopril hctz" "lisinopril/hydrochlorothiazide" "maxzide" "maxide" "microzide (Hctz)" "olmesartan/hctz" "spironactone-hctz" "spironalactone/htct" "triamterene  hctz" "amiloride hctz" "HCTZ/triamterene" "HCTZ/lisinopril" "amiloride &" "amiloride & (5/50 mg.)   (take 1/2 tab)" "amiloride w/" "amiloride with" "amlodipine/hctz" "Amiloride w/" "lisinopril HCTZ" "amloride/hydrochloride and hydrochlorothiazide""'

****** this function only drops the observation- it still keeps the maskid and the rest of the observations that do not have combo meds
the problem is the patient might start a thiazide again later and got into the analysis this way ******

					forvalues i = 1/10 { 
					    foreach med of local medlist {
					        drop if medname`i' == "`med'"
					    }
					} 


**** try this - it works!
* Generate a flag variable to identify observations with specified medications
gen flag = 0
forvalues i = 1/10 {
    foreach med of local medlist {
        replace flag = 1 if medname`i' == "`med'"
    }
}

* Create a variable that is 1 if any observation for a maskid has flag = 1
bysort maskid: egen maskid_flag = max(flag)

* Keep only observations where maskid_flag is 0 (i.e., remove all observations for maskids with flagged medications)
keep if maskid_flag == 0

* Clean up
drop flag maskid_flag



Output: 
			. distinct maskid 
			
			        |        Observations
			        |      total   distinct
			--------+----------------------
			 maskid |     143986       7212
			
			. distinct maskid if thiazide ==1
			
			        |        Observations
			        |      total   distinct
			--------+----------------------
			 maskid |      65399       4797





* Generate a variable to count occurrences
gen thiazide_daystart_same_count = 0

* Loop through daysstart1 to daysstart10
forvalues i = 1/10 {
    replace thiazide_daystart_same_count = thiazide_daystart_same_count + 1 if daysstart`i' == thiazide_daystart & thiazide_daystart != .
}

* Generate indicator for multiple occurrences
gen multiple_same_daystart = (thiazide_daystart_same_count > 1) if thiazide_daystart != .

* Optional: Label the new variable
label variable multiple_same_daystart "More than one occurrence of daystart thats identical to thiazide_daystart in daysstart1-10"


*** Now remove anyone who started thiazide the same day with other meds

* Generate a flag variable to identify observations with multiple_same_daystart == 1
gen flag = (multiple_same_daystart == 1)

* Create a variable that is 1 if any observation for a maskid has flag = 1
bysort maskid: egen maskid_flag = max(flag)

* Keep only observations where maskid_flag is 0 (i.e., remove all observations for maskids with multiple_same_daystart == 1)
keep if maskid_flag == 0

* Clean up
drop flag maskid_flag

* Optional: Display the number of observations removed
count
display "Remaining observations: " r(N)



Output: 

			. distinct maskid 
			
			        |        Observations
			        |      total   distinct
			--------+----------------------
			 maskid |      88120       4571
			
			. distinct maskid if thiazide ==1
			
			        |        Observations
			        |      total   distinct
			--------+----------------------
			 maskid |      25044       2156




* generate a cumulative count of how many times thiazide treatment starts for each patient
* counts the number of times thiazide switches from 0 to 1 within each maskid group
* thiazide_occurrence will be a cumulative count of the occurrences where:
    thiazide  changes from 0 to 1, or
    thiazide  is 1 at the start for the maskid, or formdays is 0 and thiazide is 1. (because there is no prior to compare if started on formdays 0)
    Because thiazide use at baseline is already removed, if thiazide  use daystart = formdays 0 

sort maskid formdays
by maskid: gen thiazide_occurrence = sum(thiazide == 1 & (thiazide[_n-1] == 0 | _n == 1 | formdays == 0))

* if thiazide turns from 1 to 0 and then 1 again, it will be marked as occurrence == 2


Output: 

			. distinct maskid if thiazide ==1 & thiazide_occurrence == 1
			
			        |        Observations
			        |      total   distinct
			--------+----------------------
			 maskid |      20695       2156
			
			. distinct maskid if thiazide ==1 & thiazide_occurrence == 2
			
			        |        Observations
			        |      total   distinct
			--------+----------------------
			 maskid |       3578        567



* keep only the first occurrence
			. drop if thiazide_occurrence > 1 & thiazide_occurrence !=.
			(6,244 observations deleted)
			
			. distinct maskid if thiazide ==1 & thiazide_occurrence == 1
			
			        |        Observations
			        |      total   distinct
			--------+----------------------
			 maskid |      20695       2156
			
			. distinct maskid if thiazide ==1 & thiazide_occurrence == 2
			
			        |        Observations
			        |      total   distinct
			--------+----------------------
			 maskid |          0          0



							

* To know the previous visit before thiazide turns 1
gen prior_onThiazide = .
by maskid: replace prior_onThiazide = formdays[_n-1] if thiazide == 1 & (thiazide[_n-1] == 0 | _n == 1) & thiazide_occurrence == 1

* This subsequent code ensures that only the 1st occurrence is used
replace prior_onThiazide = . if thiazide_occurrence >= 2 & prior_onThiazide != .

* Sort data by maskid and formdays
sort maskid formdays  

* Generate and fill up the entire column for each thiazide occurrence
* Generate variables for the first and second occurrences of thiazide
* The thiazide order has the num of occurrence as well but it does not carry forward

by maskid: gen first_onThiazide = formdays if thiazide == 1 & sum(thiazide) == 1
by maskid: gen second_onThiazide = formdays if thiazide == 1 & sum(thiazide) == 2

* Carry forward non-missing values in the column 'prior_onThiazide'
bysort maskid (formdays): gen prior_onThiazide_filled = prior_onThiazide if prior_onThiazide != .
bysort maskid (formdays): replace prior_onThiazide_filled = prior_onThiazide_filled[_n-1] if missing(prior_onThiazide_filled)

* Include the first row as well
by maskid: replace prior_onThiazide = prior_onThiazide[_n+1] if missing(prior_onThiazide) & !missing(prior_onThiazide[_n+1])

* Sort data again by maskid and formdays
sort maskid formdays

* Fill in the first and second occurrences of thiazide
by maskid: egen first_onThiazide_filled = max(first_onThiazide)
by maskid: egen second_onThiazide_filled = max(second_onThiazide)

* Generate and fill in the third and fourth occurrences of thiazide
by maskid: gen third_onThiazide = formdays if thiazide == 1 & sum(thiazide) == 3
by maskid: egen third_onThiazide_filled = max(third_onThiazide)
by maskid: gen fourth_onThiazide = formdays if thiazide == 1 & sum(thiazide) == 4
by maskid: egen fourth_onThiazide_filled = max(fourth_onThiazide)


* medication list
sort maskid formdays
gen med_oxin = 0
gen med_triam = 0
gen med_olol = 0
gen med_ipine_azem = 0
gen med_mra = 0
gen med_fur_bum_tors = 0
gen med_hydral_azine = 0
gen med_pril_artan = 0
gen med_idine_clon = 0
gen med_minoxi = 0 
gen med_guanfacine = 0 

* Check each medname variable for the specified patterns
forvalues i = 1/10 {
    replace med_oxin = 1 if regexm(lower(medname`i'), "(cardu|doxa|osin|oxin|hytrin|tera|tamsu|alfu)")
	replace med_triam = 0.0005 if regexm(lower(medname`i'), "(triam|amil)")
    replace med_olol = 2 if regexm(lower(medname`i'), "(olol|metop|coreg|carv|lopre|topr|propa|nebi|nado|atenelol)")
    replace med_ipine_azem = 5 if regexm(lower(medname`i'), "(ipine|azem|norv|vera|nife|proca|nicar|nefe|caduet)")
	replace med_minoxi = 10000 if regexm(lower(medname`i'), "(mino|xidil)")
	replace med_guanfacine = 0.01 if regexm(lower(medname`i'), "(guan)")
    replace med_mra = 9 if regexm(lower(medname`i'), "(spir|eple|aldac|inspra)")
    replace med_fur_bum_tors = 13 if regexm(lower(medname`i'), "(fur|bum|tors|inda|etha|demadex)")
    replace med_hydral_azine = 0.5 if regexm(lower(medname`i'), "(hydral|azine)")
    replace med_pril_artan = 1000 if regexm(lower(medname`i'), "(pril|artan|benic|vals|olme|edarbi|diovan|azil|trando|micardis|atacand)")
    replace med_idine_clon = 100 if regexm(lower(medname`i'), "(idine|clon|cata)")
}
* Sum all medication categories into a single variable
gen med_category = med_oxin + med_olol + med_ipine_azem + med_mra + med_fur_bum_tors + med_hydral_azine + med_pril_artan + med_idine_clon + med_minoxi + med_triam + med_guanfacine 

*this works for combination meds as well- for example, atenolol, amlodipine/benazapril, will sum up to 1007 ( 1000 + 5 + 2)

* Label the new variable
label variable med_category "Sum of medication categories"

* Clean up intermediate variables OR keep them for later 
drop med_oxin med_olol med_ipine_azem med_mra med_fur_bum_tors med_hydral_azine med_pril_artan med_idine_clon med_minoxi  med_triam med_guanfacine 


sort maskid formdays 
 
* Get med_category for first and second thiazide visits
by maskid: gen prior_med_category = med_category if formdays == prior_onThiazide

* Because prior_onThiazide is one row below
by maskid: replace prior_med_category = med_category if formdays == prior_onThiazide_filled

* Generate column to store "med_category" according to visits
by maskid: gen first_med_category = med_category if formdays == first_onThiazide
by maskid: gen second_med_category = med_category if formdays == second_onThiazide
by maskid: gen third_med_category = med_category if formdays == third_onThiazide
by maskid: gen fourth_med_category = med_category if formdays == fourth_onThiazide

* Fill these values for all rows within each maskid
by maskid: egen prior_med_category_filled = max(prior_med_category)
by maskid: egen first_med_category_filled = max(first_med_category)
by maskid: egen second_med_category_filled = max(second_med_category)
by maskid: egen third_med_category_filled = max(third_med_category)
by maskid: egen fourth_med_category_filled = max(fourth_med_category)

* Generate the difference in med_category between first and second visit - they should be equal 
gen med_category_diff_2_1 = second_med_category_filled - first_med_category_filled
gen med_category_diff_3_1 = third_med_category_filled - first_med_category_filled
gen med_category_diff_3_2 = third_med_category_filled - second_med_category_filled
gen med_category_diff_prior_1 = prior_med_category_filled - first_med_category_filled 
 
* Flag if med_category is unequal between visits
gen med_category_prior_1_unequal = (med_category_diff_prior_1 != 0 & med_category_diff_prior_1 !=.)
gen med_category_2_1_unequal = (med_category_diff_2_1 != 0 & med_category_diff_2_1 !=.)
gen med_category_3_1_unequal = (med_category_diff_3_1 != 0 & med_category_diff_3_1 !=. )
gen med_category_3_2_unequal = (med_category_diff_3_2 != 0 & med_category_diff_3_2 !=. ) 

* Label the new variables
label variable med_category_diff_2_1 "Difference in med_category between 1st and 2nd thiazide visits"
label variable med_category_2_1_unequal "Flag: 1 if med_category unequal between 1st and 2nd thiazide visits"

* now with the meds and visits sorted, remove if the med_category is different from the visit prior to thiazide and on thiazide startday

* Generate a flag variable to identify observations with multiple_same_daystart == 1
gen flag = (med_category_prior_1_unequal == 1)

* Create a variable that is 1 if any observation for a maskid has flag = 1
bysort maskid: egen maskid_flag = max(flag)

* Keep only observations where maskid_flag is 0 (i.e., remove all observations for maskids with multiple_same_daystart == 1)
keep if maskid_flag == 0

* Clean up
drop flag maskid_flag


2156 --> 2056 


Output: 

. distinct maskid if thiazide ==1 

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |      19989       2056




	

* explanation: the 2056 is from the criteria that no other meds share the SAME start day w thiazide. It does not exclude the meds that 
was started a couple of days before or after thiazide was started. The med_category list will reflect the changes of medications across visits, 
so it is a more robust way to ensure no other meds were started other than a thiazide. 

* Fill up the BP columns
* Generate variables for SBP at the time of thiazide occurrences
sort maskid formdays
by maskid: gen first_SBP = seatsys if formdays == first_onThiazide_filled
by maskid: egen first_SBP_filled = max(first_SBP)
by maskid: gen second_SBP = seatsys if formdays == second_onThiazide_filled
by maskid: egen second_SBP_filled = max(second_SBP)
by maskid: gen third_SBP = seatsys if formdays == third_onThiazide_filled
by maskid: egen third_SBP_filled = max(third_SBP)
by maskid: gen fourth_SBP = seatsys if formdays == fourth_onThiazide_filled
by maskid: egen fourth_SBP_filled = max(fourth_SBP)



* Find out who has missing SBP at baseline

gen have_SBP_baseline = .
replace have_SBP_baseline = 1 if cohort2 ==1 & cohort2 !=. & first_SBP_filled !=.

Output: 

. replace have_SBP_baseline = 1 if first_SBP_filled !=.
(34,803 real changes made)

. distinct maskid if have_SBP_baseline ==1

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |      34803       2010


* out of the 2056, 2010 has BP recorded for baseline 


* try this: 
* This is my crude way of getting baseline SBP - by incorporating prior visit within 60 days provided that no medications 
were changed across the 2 visits. 
* Calculate the difference between the visit when thiazide is started and the prior thiazide visit

	* Find prior SBP
sort maskid formdays 
by maskid: gen prior_SBP = seatsys[_n-1] if missing(seatsys) & !missing(seatsys[_n-1])

	* Carry forward prior SBP
by maskid: replace prior_SBP = prior_SBP[_n-1] if missing(prior_SBP) & !missing(prior_SBP[_n-1])

by maskid: egen thiazide_daystart_first = min(thiazide_daystart)
gen visit_diff_prior_Thiazide = thiazide_daystart_first - prior_onThiazide_filled 
gen visit_diff_prior_and1_eligible = visit_diff_prior_Thiazide < 60 if !missing(visit_diff_prior_Thiazide)
gen eligible_missing_first_SBP = (visit_diff_prior_and1_eligible == 1 & med_category_prior_1_unequal == 0)
gen new_first_sbp = first_SBP_filled  
replace new_first_sbp = prior_SBP if first_SBP_filled == . & eligible_missing_first_SBP == 1

* However, there could be multiple visits in that 60 days prior to thiazide start day, the above codes only take
the most proximal visit into consideration. 
* Hence, uses python to loop through prior visits as long as 
1) within 60 days from thiazide initiation
2) the medication list stays the same except for the addition of thiazide during thiazide start day



* If I were to use Python for this filters, I can actually not perform line 588 to 610

Output: 
. distinct maskid if new_first_sbp !=. 

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |      35300       2051




* save as masterdata 
save "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/masterdata_thiazide_9.3.dta"

* Generate a subdata for calculation of average BP pre-MRA initiation 
use "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/masterdata_thiazide_9.3.dta"
sort maskid formdays

gen day_diff_pre = min_thiazide_daystart - formdays

* The thiazide initiation date should be greater than the visit date (FORMDAYS) because I want to obtain blood pressure (BP) values from visits prior to the initiation of thiazide.
* In a previous analysis, I discovered that I am short of around 20 individuals who has baseline SBP compared to who has first_SBP_fillled by applying the condition "day_diff_pre < 0" using "min_thiazide_daystart" to calculate the day difference for later calculation of averaged baseline SBP. This happened because, for some participants, the date when thiazide was first recorded in the dataset (FORMDAYS) did not match the actual start date of the medication. It appears that these medications were initiated between visits.

For example:
Participant s02400 started thiazide on day 1752, but it was first recorded in the dataset on day 1782, with a systolic blood pressure measurement available for day 1782 but not for day 1752. the difference is 30 days apart- the day_diff_pre will be -30 whereas the day_diff_pre_2 will be 0 as seen in row 3 shown below. the day_diff_pre of -30 should be excluded because the meds is started 30 days PRIOR to the formday 1782 visit and hence
the SBP on formdays 1782 is a post-thiazide BP change. 

Excerpt of such data discrepancies: 
Output: 

maskid	formdays	seatsys	thiazide	first_thiazide_formdays_filled	first_thiazide_daysstart_filled	min_thiazide_daystart	first_SBP_filled	new_first_sbp	day_diff_pre	day_diff_pre_2	differentformdaysstartday	diff
S02400	1642	163	0	1782	1752	1752	123	123	110	140	1	-30
S02400	1662	145	0	1782	1752	1752	123	123	90	120	1	-30
S02400	1782	123	1	1782	1752	1752	123	123	-30	0	1	-30





gen day_diff_pre_2 = first_thiazide_formdays_filled - formdays
gen diff = day_diff_pre - day_diff_pre_2 

gen differentformdaysstartday = 1 if day_diff_pre != day_diff_pre_2 
(67,972 missing values generated)

			. distinct maskid if differentformdaysstartday == 1 
			
			        |        Observations
			        |      total   distinct
			--------+----------------------
			 maskid |      12071        685
			

		
			. summarize diff, detail
			
			                            diff
			-------------------------------------------------------------
			      Percentiles      Smallest
			 1%          -49           -366
			 5%            0           -366
			10%            0           -366       Obs              35,639
			25%            0           -366       Sum of Wgt.      35,639
			
			50%            0                      Mean          -.3737759
			                        Largest       Std. Dev.      25.25771
			75%            1           1069
			90%            1           1069       Variance        637.952
			95%            1           1069       Skewness       14.62392
			99%           12           1069       Kurtosis       807.0759




* the histogram showed mostly in the range of plus minus 10-20. 
* therefore, I will use "first_thiazide_daystart" or "min_thiazide_daystart" over "first_thiazide_formdays" 

drop if day_diff_pre < 0 & day_diff_pre !=.

* Limit the prior visit to within 60 days
drop if day_diff_pre > 60 & day_diff_pre !=.

* Instead of sorting by formdays
* Sort by day_diff_pre so the first observation of the med_category, which is the day thiazide is started,
* can be used as a reference for prior visit med_category

sort maskid day_diff_pre
by maskid: gen consistent_med = (med_category == med_category[1])


* after I removed the day_diff_pre of >60 and <0, the diff is less skewed- looks like the outliers are gone now: 

		. summarize diff, detail
		
                            diff
-------------------------------------------------------------
      Percentiles      Smallest
 1%          -27           -366
 5%            0           -166
10%            0           -154       Obs               2,976
25%            0           -154       Sum of Wgt.       2,976

50%            0                      Mean          -.0967742
                        Largest       Std. Dev.      12.48017
75%            1             63
90%            1             98       Variance       155.7547
95%            2            153       Skewness      -7.544163
99%           13            278       Kurtosis       379.3699



* Browse data to export to Excel as CSV file
browse maskid formdays seatsys new_first_sbp day_diff_pre consistent_med min_thiazide_daystart

export delimited maskid formdays seatsys new_first_sbp day_diff_pre consistent_med min_thiazide_daystart using "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/export_preThiazide_bp_to_python_9.3", replace


save "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/subset_masterdata_thiazide_9.3_for_preThiazide_SBP_python.dta", replace


* enter Python 
import numpy as np
import pandas as pd

if 'maskid' in df.index.names:
    df.reset_index(inplace=True)


# Sort the dataframe by maskid and formdays
df = df.sort_values(['maskid', 'formdays'])


def calculate_bp_pre_thiazide(df):
    # Sort the dataframe by maskid and day_diff_pre in descending order
    df = df.sort_values(['maskid', 'day_diff_pre'], ascending=[True, False])

    # Initialize columns for bp_pre_thiazide visits
    max_visits = 10  # Adjust this number based on your data
    for i in range(1, max_visits + 1):
        df[f'bp_pre_thiazide_visit_{i}'] = np.nan

    # Function to process each patient
    def process_patient(group):
        visit_count = 0
        record_seatsys = False
        day_diff_pre_values = []  # List to store day_diff_pre values for valid visits

        for idx, row in group.iterrows():
            if 0 <= row['day_diff_pre'] <= 60:
                if row['consistent_med'] == 1:
                    if not pd.isna(row['seatsys']):
                        visit_count += 1
                        group.loc[idx, f'bp_pre_thiazide_visit_{visit_count}'] = row['seatsys']
                        day_diff_pre_values.append(row['day_diff_pre'])
                        record_seatsys = True
                elif row['consistent_med'] == 0:
                    # Reset when consistent_med turns 0
                    record_seatsys = False
                    visit_count = 0
            if row['day_diff_pre'] == 0 and visit_count == 0 and not pd.isna(row['seatsys']):
                visit_count += 1
                group.loc[idx, f'bp_pre_thiazide_visit_{visit_count}'] = row['seatsys']
                day_diff_pre_values.append(row['day_diff_pre'])

        # Calculate statistics for day_diff_pre
        if day_diff_pre_values:
            group['mean_day_diff_pre'] = np.mean(day_diff_pre_values)
            group['median_day_diff_pre'] = np.median(day_diff_pre_values)
            group['min_day_diff_pre'] = np.min(day_diff_pre_values)
            group['max_day_diff_pre'] = np.max(day_diff_pre_values)
        else:
            group['mean_day_diff_pre'] = np.nan
            group['median_day_diff_pre'] = np.nan
            group['min_day_diff_pre'] = np.nan
            group['max_day_diff_pre'] = np.nan

        return group

    # Apply the function to each patient group
    df = df.groupby('maskid').apply(process_patient)

    # Calculate the average of bp_pre_thiazide across visits
    bp_pre_thiazide_columns = [f'bp_pre_thiazide_visit_{i}' for i in range(1, max_visits + 1)]
    df['avg_bp_pre_thiazide'] = df[bp_pre_thiazide_columns].mean(axis=1)

    return df

# Assuming you have your dataframe loaded as 'df'
# df = pd.read_csv('your_data.csv')

# Apply the function to your dataframe
df = calculate_bp_pre_thiazide(df)

# Display the results
print(df[['maskid', 'day_diff_pre', 'consistent_med', 'seatsys'] + 
        [f'bp_pre_thiazide_visit_{i}' for i in range(1, 11)] + 
        ['avg_bp_pre_thiazide', 'mean_day_diff_pre', 'median_day_diff_pre', 'min_day_diff_pre', 'max_day_diff_pre']])

# Save the results
df.to_csv('bp_pre_thiazide_9.3.csv', index=False)



Footnote:
Inside the process_patient function, the list day_diff_pre_values is used to store the day_diff_pre values for valid visits. When a valid visit is recorded (i.e., when we set a value for bp_pre_thiazide_visit_X), we also append the corresponding day_diff_pre value to our list. After processing all rows for a patient, statistics such as mean, median, min, and max of the day_diff_pre values are calculated.


* back to STATA 16
import delimited "/Users/jiawei/Downloads/bp_pre_thiazide_9.3.csv", clear 

save "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/preThiazide_bpavg_frmpython9.3.dta"

sort maskid formdays
by maskid: egen previsit1BP = max(bp_pre_thiazide_visit_1)
by maskid: egen previsit2BP = max(bp_pre_thiazide_visit_2)
by maskid: egen previsit3BP = max(bp_pre_thiazide_visit_3)
by maskid: egen previsit4BP = max(bp_pre_thiazide_visit_4)
egen row_mean = rowmean(previsit1BP previsit2BP previsit3BP previsit4BP) 
rename row_mean meanSBPpreThiazide
rename meanSBPpreThiazide new_first_sbp_avg

save "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/preThiazide_bpavg_frmpython9.3.dta", replace

* With the above I had transferred python pre-thiazide averaged SBP 
* Combine this with the FULL cohort... 

use "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/masterdata_thiazide_9.3 .dta"
drop _merge

* merge with formdays as part of the criteria as well because the maskid is not unique, but the maskid+formdays combo is unique 
merge m:m maskid formdays using "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/preThiazide_bpavg_frmpython9.3.dta"
sort maskid formdays

Output: 

    Result                           # of obs.
    -----------------------------------------
    not matched                        32,663
        from master                    32,663  (_merge==1)
        from using                          0  (_merge==2)

    matched                            47,380  (_merge==3)
    -----------------------------------------


. distinct maskid if _merge ==3

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |      47380       4451


(this 4451 number is different from prior, filter out anyone who is not on thiazide- I need that prior obs for baseline BP calculation before 
they change their status to thiazide-users, to get systolic BP baseline for every one on thiazide and apply the filters afterwards)

* fill up the entire column with the new first SBP avg 
egen new_first_sbp_avg_filled = min(new_first_sbp_avg) , by (maskid)

. distinct maskid if thiazide ==1 

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |      19989       2056

. 
. distinct maskid if thiazide ==1 & new_first_sbp_avg_filled !=.

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |      19899       2029



*** who are the individuals with no baseline SBP and why 
* Missing SBP at baseline occurs when first_thiazide_daysstart falls between two visits. In these cases, the prior visit either has a missing seatsys or occurs more than 60 days before thiazide initiation. Additionally, in the visit where thiazide is first started, formdays is greater than first_thiazide_daysstart, indicating that the SBP recorded belongs to a post-thiazide initiation visit. As this SBP does not reflect the baseline before thiazide initiation, it is excluded from the analysis. This sequence leads to gaps in baseline SBP data for certain patients.


* Identify maskid where thiazide == 1 and new_first_sbp_avg_filled is missing
gen is_missing_sbp = missing(new_first_sbp_avg_filled)

* List maskid with thiazide == 1 and missing new_first_sbp_avg_filled
list maskid if first_thiazide_occurrence == 1 & is_missing_sbp == 1

* exactly 27 of them here - add 27 to 2029 = 2056 
		
	
       +--------+
       | maskid |
       |--------|
 1665. | S01958 |
 2095. | S02400 |
10173. | S13017 |
12496. | S16076 |
13687. | S17282 |
       |--------|
16310. | S20682 |
19292. | S24421 |
19614. | S24785 |
25188. | S32028 |
27254. | S34382 |
       |--------|
30610. | S38430 |
39286. | S48422 |
44688. | S55156 |
45115. | S55837 |
47417. | S59100 |
       |--------|
50443. | S62954 |
50582. | S63070 |
54036. | S67108 |
54857. | S67941 |
61495. | S75581 |
       |--------|
62123. | S76420 |
65272. | S80615 |
68465. | S84401 |
72166. | S89573 |
76119. | S95131 |
       |--------|
77489. | S96932 |
78824. | S98453 |
       +--------+

		

. * Check if these individuals have seatsys not missing when thiazide_occurrence == 1

. list maskid seatsys if first_thiazide_occurrence == 1 & is_missing_sbp == 1 & !missing(seatsys)

       +------------------+
       | maskid   seatsys |
       |------------------|
 1665. | S01958       122 |
 2095. | S02400       123 |
10173. | S13017       143 |
13687. | S17282       129 |
16310. | S20682       118 |
       |------------------|
19292. | S24421       147 |
19614. | S24785       133 |
25188. | S32028       124 |
27254. | S34382       123 |
30610. | S38430       134 |
       |------------------|
39286. | S48422       143 |
44688. | S55156        90 |
45115. | S55837       118 |
47417. | S59100       135 |
50443. | S62954       148 |
       |------------------|
50582. | S63070       152 |
54036. | S67108       137 |
54857. | S67941        95 |
62123. | S76420       152 |
65272. | S80615       107 |
       |------------------|
68465. | S84401       130 |
78824. | S98453       127 |
       +------------------+


22 of these individuals have non-missing seatsys when they first started on thiazide. 


* create a subset of data to store these maskid with missing baseline SBP 

* Create flags for the conditions
gen is_missing_sbp = missing(new_first_sbp_avg_filled)

* Identify the maskid that meet the condition
gen condition_met = (first_thiazide_occurrence == 1 & is_missing_sbp == 1 )

* Create a flag for maskid that meet the condition
bysort maskid: egen maskid_meets_condition = max(condition_met)

* Generate the subset and save it as a new dataset
preserve
keep if maskid_meets_condition == 1

* Keep only the required variables
keep maskid formdays first_thiazide_daysstart first_thiazide_formdays med_category seatsys

* Save the subset to a new dataset
save subset_maskid_data_all_obs.dta, replace

* Restore the original dataset
restore

* I stored the data under "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/analysis/data/subset_maskid_data_all_obs.dta")"



* The mean days SBP was obtained prior to thiazide initiation

		
                      mean_day_diff_pre
-------------------------------------------------------------
      Percentiles      Smallest
 1%            0              0
 5%            0              0
10%            0              0       Obs               2,970
25%            0              0       Sum of Wgt.       2,970

50%         13.5                      Mean           11.23998
                        Largest       Std. Dev.       11.0202
75%           18             58
90%           27             58       Variance       121.4448
95%           29             59       Skewness        .650187
99%           41             60       Kurtosis       2.993742


* The "consistent_med" from the pre-thiazide initiation BP data; now we want to calculate the post-thiazide initiation BP
drop consistent_med

* Now to get the SBP in 90 days post-thiazide
* Keep only observations within 90 days of first thiazide start or where first_thiazide_occurrence is 1
gen diff = formdays - min_thiazide_daystart if thiazide == 1
keep if diff != . & diff < 91
keep if diff >= 0 & diff !=. 

* Sort the data
sort maskid formdays 

* Check for consistent med_category again
by maskid: gen consistent_med = (med_category == med_category[1])


* The medication category at the time thiazide was first initiated is used as the reference for determining consistent_med.
* If consistent_med turns to zero, it indicates a change in the medication category from the prior visit.
* In this case, the SBP value in the row where consistent_med turns zero will still be used because the effect of the medication change will be reflected in the subsequent SBP measurement, not the current one.

*** After the filters- to keep only maskid with visits within 90 days post thiazide initiation, 2056 --> 2007 

2007 individuals enter Python loop for delta SBP calculation 


. distinct maskid 

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |       5052       2007


* Save the dataset
save "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/masterdata_w_prethiazideSBP_prepforpython9.3.dta"

* Browse and export the data
browse maskid formdays new_first_sbp_avg_filled min_thiazide_daystart diff seatsys med_category 

export delimited maskid formdays new_first_sbp_avg_filled min_thiazide_daystart diff seatsys med_category consistent_med using "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/export_postthiazide_bp_to_python_9.3", replace




* enter python 

import numpy as np
import pandas as pd

# Sort the dataframe by maskid and formdays
df = df.sort_values(['maskid', 'formdays'])

# Initialize new columns for results
df['bp_diff'] = np.nan
df['days_since_thiazide'] = np.nan

# Initialize columns for visit-specific bp_diff
for i in range(1, 6):
    df[f'bp_diff_visit_{i}'] = np.nan

# Initialize new columns for diff duration statistics
df['mean_diff_duration'] = np.nan
df['median_diff_duration'] = np.nan
df['min_diff_duration'] = np.nan
df['max_diff_duration'] = np.nan

# Group the dataframe by maskid
for maskid, group in df.groupby('maskid'):
    group = group.copy()  # Create a copy to avoid SettingWithCopyWarning
    
    # Check if thiazide_daystart is NaN for all rows in this group
    if group['min_thiazide_daystart'].isna().all():
        continue
    
    # Find the first non-NaN thiazide_daystart
    min_thiazide_daystart = group['min_thiazide_daystart'].dropna().iloc[0]
    
    # Calculate days since thiazide start
    group['days_since_thiazide'] = group['formdays'] - min_thiazide_daystart
    
    # Filter rows that are at least 30 days after thiazide start
    eligible_rows = group[group['days_since_thiazide'] >= 30]
    
    if eligible_rows.empty:
        continue  # Skip if no eligible rows
    
    visit_count = 0
    last_valid_seatsys = None
    diff_durations = []  # List to store diff durations for statistics
    
    for idx, row in eligible_rows.iterrows():
        if pd.isna(row['seatsys']) and last_valid_seatsys is not None:
            seatsys = last_valid_seatsys
        else:
            seatsys = row['seatsys']
            last_valid_seatsys = seatsys
        
        if pd.notna(seatsys):
            bp_diff = seatsys - row['new_first_sbp_avg_filled']
            if row['consistent_med'] == 1:
                visit_count += 1
                group.loc[idx, f'bp_diff_visit_{visit_count}'] = bp_diff
                group.loc[idx, 'bp_diff'] = bp_diff
                diff_durations.append(row['days_since_thiazide'])
            elif row['consistent_med'] == 0:
                group.loc[idx, 'bp_diff'] = bp_diff
                diff_durations.append(row['days_since_thiazide'])
                break  # Stop calculating bp_diff after consistent_med becomes 0
    
    # Calculate average bp_diff across all visits
    bp_diff_columns = [f'bp_diff_visit_{i}' for i in range(1, 6)]
    group['avg_bp_diff'] = group[bp_diff_columns].mean(axis=1)
    
    # Calculate statistics for diff durations
    if diff_durations:
        mean_diff_duration = np.mean(diff_durations)
        median_diff_duration = np.median(diff_durations)
        min_diff_duration = np.min(diff_durations)
        max_diff_duration = np.max(diff_durations)
        
        # Assign these values to all rows in the group
        group['mean_diff_duration'] = mean_diff_duration
        group['median_diff_duration'] = median_diff_duration
        group['min_diff_duration'] = min_diff_duration
        group['max_diff_duration'] = max_diff_duration
    
    # Update the original dataframe with the results
    df.update(group)

# Export to STATA
float_columns = df.select_dtypes(include=['float64']).columns
df[float_columns] = df[float_columns].astype('float32')
df.to_stata('post_thiazide_BP_avg_file_9.1.dta', version=117, write_index=True)
print("Data exported successfully")


# Import to STATA
use "/Users/jiawei/Downloads/post_thiazide_BP_avg_file_9.3.dta"
egen mean_bp_diff_thiazide = mean(bp_diff), by(maskid)


* an excerpt of the dataset


maskid	formdays	new_first_sbp_avg_filled	diff	seatsys	med_category	consistent_med	bp_diff	bp_diff_visit_1	bp_diff_visit_2	bp_diff_visit_3	bp_diff_visit_4	mean_diff_duration	mean_bp_diff_thiazide
S00007	58	145	56	117	1002	1	-28	-28				56	-28
S00010	205	147	21	118	2	1							
S00109	59	129.5	23	103	1002	1						58	-43.5
S00109	94	129.5	58	86	1002	1	-43.5	-43.5				58	-43.5
S00122	0	137	0	137	1000	1						61	-1.666667
S00122	34	137	34	133	1000	1	-4	-4				61	-1.666667
S00122	62	137	62	137	1000	1	0		0			61	-1.666667
S00122	87	137	87	136	1000	1	-1			-1		61	-1.666667
S00128	0	125	0	125	0	1						62	-4
S00128	28	125	28	140	0	1						62	-4
S00128	62	125	62	121	2	0	-4					62	-4
S00193	133	131	41	111	1014	1	-20	-20				64.5	-20
S00193	180	131	88	111	1014	1	-20		-20			64.5	-20
S00349	60	153.5	28	112	1002	1						56	-20.5
S00349	88	153.5	56	133	1002	1	-20.5	-20.5				56	-20.5
S00356	731	123	0	123	0	1							
S00554	28	137	0	133	1007	1						72.5	-10
S00554	53	137	25	118	1007	1						72.5	-10
S00554	83	137	55	132	1007	1	-5	-5				72.5	-10
S00554	118	137	90	122	1007	1	-15		-15			72.5	-10

Footnote:

* Each maskid will have a single mean_diff, representing the average of the formdays used to calculate the change in blood pressure 
For example, if BP measurements were taken on days 36 and 58, the average formdays would be 47. This represents the mean duration of formdays for calculating the delta SBP 

* Since each maskid has one mean_diff duration, I will take only one observation per maskid. This ensures that when I calculate the average mean_diff duration, the denominator reflects unique individuals rather than all available observations.


sort maskid formdays
by maskid: gen first_obs = (_n == 1)

bysort first_ob: summarize mean_diff_duration, detail

			-> first_obs = 1
			
			                     mean_diff_duration
			-------------------------------------------------------------
			      Percentiles      Smallest
			 1%           30             30
			 5%           33             30
			10%           35             30       Obs               1,600
			25%           47             30       Sum of Wgt.       1,600
			
			50%           55                      Mean            55.3575
			                        Largest       Std. Dev.      14.01821
			75%           63             90
			90%         74.5             90       Variance       196.5103
			95%           83             90       Skewness       .2738789
			99%           90             90       Kurtosis       2.705279
			
			
			
			. distinct maskid 
			
			        |        Observations
			        |      total   distinct
			--------+----------------------
			 maskid |       5052       2007
			
			. distinct maskid if bp_diff !=.
			
			        |        Observations
			        |      total   distinct
			--------+----------------------
			 maskid |       2459       1593



* A total of 1593 out of 2007 BP deltas were calculated, with a mean formdays of 55, which is excellent! 
The range of formdays spans from 30 to 90, in line with our criteria. 
* the number went down from 2007 to 1593 secondarily to the filters in Python 
1) BP must be >30 days post thiazide initiation 
2) the medication list is constant across the visits 


save "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/from python delta BP thiazide 9.3.dta"


* now merge the dataset with masterdata

use "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/masterdata_thiazide_9.3.dta"
drop _merge
merge m:m maskid formdays using "/Users/jiawei/Library/CloudStorage/Box-Box/JiaWeiTan Project folder (from Maria)/from python delta BP thiazide 9.3.dta"
drop _merge 

			
			    Result                           # of obs.
			    -----------------------------------------
			    not matched                        74,991
			        from master                    74,991  (_merge==1)
			        from using                          0  (_merge==2)
			
			    matched                             5,052  (_merge==3)
			    -----------------------------------------
			


Output: 

	                
			. distinct maskid if mean_bp_diff !=. 
			
			        |        Observations
			        |      total   distinct
			--------+----------------------
			 maskid |       4406       1593
			
			. distinct maskid if mean_bp_diff !=. & thiazide ==1
			
			        |        Observations
			        |      total   distinct
			--------+----------------------
			 maskid |       4406       1593





* only 1593 available for delta BP 

			
			. summarize mean_bp_diff, detail, if thiazide ==1
			
			                    mean_bp_diff_thiazide
			-------------------------------------------------------------
			      Percentiles      Smallest
			 1%          -54            -95
			 5%          -41            -95
			10%          -35          -74.5       Obs               4,406
			25%    -23.66667          -74.5       Sum of Wgt.       4,406
			
			50%       -13.75                      Mean          -14.51581
			                        Largest       Std. Dev.      15.53865
			75%         -4.5             35
			90%            4             70       Variance       241.4497
			95%            9             70       Skewness      -.1840778
			99%         21.5             70       Kurtosis       4.228885
			
			. summarize mean_bp_diff, detail
			
			                    mean_bp_diff_thiazide
			-------------------------------------------------------------
			      Percentiles      Smallest
			 1%          -54            -95
			 5%          -41            -95
			10%          -35          -74.5       Obs               4,406
			25%    -23.66667          -74.5       Sum of Wgt.       4,406
			
			50%       -13.75                      Mean          -14.51581
			                        Largest       Std. Dev.      15.53865
			75%         -4.5             35
			90%            4             70       Variance       241.4497
			95%            9             70       Skewness      -.1840778
			99%         21.5             70       Kurtosis       4.228885

* ? The mean SBP is averaged across observations or individuals?
* to solve this assign 1 number to each maskid and they all have only 1 observation with 1 delta BSP 
* carry forward the mean_bp_diff_thiazide for each maskid 

sort maskid formdays 
egen mean_bp_diff_thiazide_filled = min(mean_bp_diff_thiazide) , by (maskid)


sort maskid formdays
by maskid: gen first_obs_fordeltaBP = (_n == 1)

. summarize mean_bp_diff_thiazide_filled, detail, if first_obs_fordeltaBP ==1

			                mean_bp_diff_thiazide_filled
			-------------------------------------------------------------
			      Percentiles      Smallest
			 1%          -54            -95
			 5%          -41          -74.5
			10%          -35          -72.5       Obs               1,593
			25%        -23.5            -67       Sum of Wgt.       1,593
			
			50%    -13.66667                      Mean          -14.33998
			                        Largest       Std. Dev.      15.54032
			75%         -4.5             33
			90%            4             34       Variance       241.5016
			95%            9             35       Skewness      -.2018821
			99%           24             70       Kurtosis       4.236693

* okay they are essentially the same
* note that the duration of days post thiazide is 55.6 day - which is pretty good



* create the FINAL thiazide cohort
gen thiazide_cohort = .
replace thiazide_cohort = 1 if mean_bp_diff_thiazide_filled !=. 

. distinct maskid if thiazide_cohort ==1 

        |        Observations
        |      total   distinct
--------+----------------------
 maskid |      28359       1593


